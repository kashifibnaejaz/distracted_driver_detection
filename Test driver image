from __future__ import division
import torch
torch.manual_seed(0)
import torchvision
import torchvision.transforms as transforms
from torch.autograd import Variable
from PIL import Image, ImageOps, ImageEnhance
import cv2
from google.colab.patches import cv2_imshow


transform = transforms.Compose([
    transforms.Resize((256, 256)),
    transforms.RandomCrop(224, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),
])

model=torch.load('/content/gdrive/MyDrive/STF/dummy_save_finetune/model 99.98.pth')  # Load pretrained parameters
model.eval()  # Set to eval mode to change behavior of Dropout, BatchNorm

predictions=["safe driving","texting - right","talking on the phone - right","texting - left","talking on the phone - left","operating the radio","drinking",
"reaching behind","hair and makeup", "talking to passenger"]

path="/content/gdrive/MyDrive/STF/test1/c8/img_100015.jpg"

img = Image.open(path)  # Load image as PIL.Image
image=cv2.imread(path)
x = transform(img)  # Preprocess image
x = x.unsqueeze(0)  # Add batch dimension

output = model(x)  # Forward pass
pred = torch.argmax(output, 1)  # Get predicted class if multi-class classification
print('Image predicted as ', predictions[pred[0]])
window=predictions[pred[0]]
cv2_imshow(image)
