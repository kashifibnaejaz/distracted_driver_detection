def finetunetest(net,  criterion, batch_size):
    net.eval()

    use_cuda = torch.cuda.is_available()
    test_loss = 0
    correct = 0
    correct_t = 0
    correct_com = 0
    total = 0
    idx = 0
    device = torch.device("cuda")


    transform_test = transforms.Compose([
        transforms.Resize((256, 256)),
        transforms.RandomCrop(224, padding=4),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),
    ])
    testset = torchvision.datasets.ImageFolder(root='/content/gdrive/MyDrive/STF/test1',
                                               transform=transform_test)
    testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=True, num_workers=4)


    with torch.no_grad():
        for batch_idx, (inputs, targets) in enumerate(testloader):
            idx = batch_idx
            if use_cuda:
                inputs, targets = inputs.to(device), targets.to(device)
            inputs, targets = Variable(inputs, volatile=True), Variable(targets)
            output = net(inputs)
           # _, _, _, output_t = net(inputs)


            loss = criterion(output, targets)


            test_loss += loss.item()
            _, predicted = torch.max(output.data, 1)
           # , predicted_t = torch.max(output_t.data, 1)
            total += targets.size(0)
            correct += predicted.eq(targets.data).cpu().sum()
          #  correct_t += predicted_t.eq(targets.data).cpu().sum()


            if batch_idx % 50 == 0 or batch_idx == testloader.__len__()-1:
                print('Step: %d | Loss: %.3f | Acc: %.3f%% (%d/%d) |' % (
                batch_idx, test_loss / (batch_idx + 1), 100. * float(correct) / total, correct, total))


    test_acc = 100. * float(correct) / total


    test_loss = test_loss / (idx + 1)



    return test_acc, test_loss
